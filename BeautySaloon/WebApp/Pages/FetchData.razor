@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using BeautySaloon.Api.Dto.Common;
@using BeautySaloon.Api.Services;
@using WebApp.Handlers
@using Radzen
@inject IUserHttpClient UserClient
@inject NotificationService Notifier;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ФИО</th>
                <th>Логин</th>
                <th>Телефон</th>
                <th>Эл. почта</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data.Items)
            {
                <tr>
                    <td>@item.Name.ConcatedName</td>
                    <td>@item.Login</td>
                    <td>@item.PhoneNumber</td>
                    <td>@item.Email</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ItemListResponseDto<BeautySaloon.Api.Dto.Responses.User.GetUserResponseDto>? data;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            data = await UserClient.GetListAsync(new BeautySaloon.Api.Dto.Requests.User.GetUserListRequestDto(null), CancellationToken.None);
        }
        catch (CustomApiException ex)
        {
            Notifier.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = ex.Message,
                Detail = ex.Details.ErrorMessage,
                Duration = 4000
            });
        }
    }
}
