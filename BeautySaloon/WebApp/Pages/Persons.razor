@page "/persons"

<PageTitle>Пользователи</PageTitle>

@using BeautySaloon.Api.Dto.Common;
@using BeautySaloon.Api.Dto.Responses.Person
@using BeautySaloon.Api.Dto.Responses.User
@using BeautySaloon.Api.Services;
@using BeautySaloon.DAL.Entities.ValueObjects.Pagination
@using WebApp.Handlers
@using BeautySaloon.DAL.Entities.Enums;
@using Radzen

@inject IPersonHttpClient _personHttpClient
@inject NotificationService _notificationService;
@inject NavigationManager _navigationManager;
@inject DialogService _dialogService;

<div class="row px-2">
    <h1>Клиенты</h1>
</div>

<div class="row px-2">
    <div class="col-4">
        <RadzenTextBox Name="SearchInput" Placeholder="Поиск по наименованию" @bind-Value=@_searchString
                       class="w-100"
                       @onkeyup=OnChangeSearchInputAsync />
    </div>
    <div class="col-7" />
    <div class="col-1">
        <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Dark" Click=@OpenCreatePersonModalAsync>Создать</RadzenButton>
    </div>
</div>

@if (_data == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row px-3">
        <div class="col-md-12 p-1">
            <RadzenDataGrid Data="@_data!.Items"
                        TItem="GetPersonListItemResponseDto"
                        ColumnWidth="200px"
                        AllowColumnResize="true"
                        AllowPaging="true"
                        PageSize="@_pageSize"
                        Count="@_data.TotalCount"
                        LoadData="@LoadDataAsync">
                <Columns>
                    <RadzenDataGridColumn TItem="GetPersonListItemResponseDto" Property="Name.ConcatedName" Title="ФИО" />
                    <RadzenDataGridColumn TItem="GetPersonListItemResponseDto" Property="BirthDate.ToShortDateString()" Title="Дата рождения" />
                    <RadzenDataGridColumn TItem="GetPersonListItemResponseDto" Property="PhoneNumber" Title="Телефон" />
                    <RadzenDataGridColumn TItem="GetPersonListItemResponseDto" Property="Email" Title="Эл. почта" />
                    <RadzenDataGridColumn TItem="GetPersonListItemResponseDto" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Title="Действия">
                        <Template Context="user">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(args => OpenUpdatePersonModalAsync(user.Id))" />
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(args => DeleteUserAsync(user.Id))" @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
}

@code {
    private PageResponseDto<GetPersonListItemResponseDto>? _data;

    private string? _searchString;

    private int _pageSize = 10;

    private int _pageNumber = 1;

    protected override async Task OnInitializedAsync()
    {
        await OnChangeSearchInputAsync();
    }

    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _pageSize = args.Top ?? _pageSize;
        _pageNumber = args.Skip.HasValue
        ? (args.Skip.Value / _pageSize) + 1
        : _pageNumber;

        await OnChangeSearchInputAsync();
    }

    private async Task OnChangeSearchInputAsync()
    {
        try
        {
            _data = await _personHttpClient.GetListAsync(
                new BeautySaloon.Api.Dto.Requests.Person.GetPersonListRequestDto
                {
                    SearchString = _searchString,
                    Page = new BeautySaloon.DAL.Entities.ValueObjects.Pagination.PageRequestDto(_pageNumber, _pageSize)
                }, CancellationToken.None);
        }
        catch (CustomApiException ex)
        {
            _notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = ex.Message,
                    Detail = ex.Details.ErrorMessage,
                    Duration = 4000
                });

            _navigationManager.NavigateTo("/login");
        }
    }

    private async Task OpenUpdatePersonModalAsync(Guid personId)
    {
        var result = await _dialogService.OpenAsync<UpdatePersonModal>(
            "Редактирование пользователя",
            new Dictionary<string, object>() { { "PersonId", personId } },
            new DialogOptions { Resizable = true, Draggable = true });

        if ((result as bool?).GetValueOrDefault())
        {
            await OnChangeSearchInputAsync();
        }
    }

    private async Task OpenCreatePersonModalAsync()
    {
        var result = await _dialogService.OpenAsync<CreatePersonModal>(
            "Создание пользователя",
            options: new DialogOptions { Resizable = true, Draggable = true });

        if ((result as bool?).GetValueOrDefault())
        {
            await OnChangeSearchInputAsync();
        }
    }

    private async Task DeleteUserAsync(Guid userId)
    {
        var dialogResult = await _dialogService.Confirm("Вы действительно удалить запись?", "Удаление пользователя",
           new ConfirmOptions { OkButtonText = "Да", CancelButtonText = "Нет" });

        if (dialogResult.GetValueOrDefault())
        {
            await _personHttpClient.DeleteAsync(userId, CancellationToken.None);
            await OnChangeSearchInputAsync();
        }
    }
}
