@page "/"

<PageTitle>Пользователи</PageTitle>

@using BeautySaloon.Api.Dto.Common;
@using BeautySaloon.Api.Dto.Responses.User
@using BeautySaloon.Api.Services;
@using WebApp.Handlers
@using BeautySaloon.DAL.Entities.Enums;
@using Radzen

@inject IUserHttpClient _userClient
@inject NotificationService _notificationService;
@inject NavigationManager _navigationManager;
@inject DialogService _dialogService;

<div class="row px-2">
    <h1>Пользователи</h1>
</div>

<div class="row px-2">
    <div class="col-4">
        <RadzenTextBox Name="SearchInput" Placeholder="Поиск по наименованию" @bind-Value=@_searchString
                       class="w-100"
                       @onkeyup=OnChangeSearchInputAsync />
    </div>
    <div class="col-7" />
    <div class="col-1">
        <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Dark" Click=@OpenCreateUserModalAsync>Создать</RadzenButton>
    </div>
</div>

@if (_data == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row px-3">
        <div class="col-md-12 p-1">
            <RadzenDataGrid Data="@_data!.Items"
                        TItem="GetUserResponseDto"
                        ColumnWidth="200px"
                        AllowColumnResize="true">
                <Columns>
                    <RadzenDataGridColumn TItem="GetUserResponseDto" Property="Name.ConcatedName" Title="ФИО" />
                    <RadzenDataGridColumn TItem="GetUserResponseDto" Property="Role" Title="Роль">
                        <Template Context="user">
                            @switch (user.Role)
                            {
                                case Role.Admin:
                                    <span>Администратор</span>
                                    break;
                                case Role.Employee:
                                    <span>Сотрудник</span>
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="GetUserResponseDto" Property="Login" Title="Логин" />
                    <RadzenDataGridColumn TItem="GetUserResponseDto" Property="PhoneNumber" Title="Телефон" />
                    <RadzenDataGridColumn TItem="GetUserResponseDto" Property="Email" Title="Эл. почта" />
                    <RadzenDataGridColumn TItem="GetUserResponseDto" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Title="Действия">
                        <Template Context="user">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(args => OpenEditUserModalAsync(user.Id))" />
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(args => DeleteUserAsync(user.Id))" @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
}

@code {
    private ItemListResponseDto<GetUserResponseDto>? _data;

    private GetUserResponseDto _currentUser = default!;

    private string? _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _currentUser = await _userClient.GetAsync(CancellationToken.None);
        }
        catch (CustomApiException ex)
        {
            _notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = ex.Message,
                    Detail = ex.Details.ErrorMessage,
                    Duration = 4000
                });
        }

        await OnChangeSearchInputAsync();
    }

    private async Task OnChangeSearchInputAsync()
    {
        try
        {
            _data = await _userClient.GetListAsync(new BeautySaloon.Api.Dto.Requests.User.GetUserListRequestDto(_searchString), CancellationToken.None);
        }
        catch (CustomApiException ex)
        {
            _notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = ex.Message,
                Detail = ex.Details.ErrorMessage,
                Duration = 4000
            });

            _navigationManager.NavigateTo("/login");
        }
    }

    private async Task OpenEditUserModalAsync(Guid userId)
    {
        var result = await _dialogService.OpenAsync<UpdateUserModal>(
            "Редактирование пользователя",
            new Dictionary<string, object>() { { "UserId", userId } },
            new DialogOptions { Resizable = true, Draggable = true });

        if ((result as bool?).GetValueOrDefault())
        {
            await OnChangeSearchInputAsync();
        }
    }

    private async Task OpenCreateUserModalAsync()
    {
        var result = await _dialogService.OpenAsync<CreateUserModal>(
            "Создание пользователя",
            options: new DialogOptions { Resizable = true, Draggable = true });

        if ((result as bool?).GetValueOrDefault())
        {
            await OnChangeSearchInputAsync();
        }
    }

    private async Task DeleteUserAsync(Guid userId)
    {
        var dialogResult = await _dialogService.Confirm("Вы действительно удалить запись?", "Удаление пользователя",
           new ConfirmOptions { OkButtonText = "Да", CancelButtonText = "Нет" });

        if (dialogResult.GetValueOrDefault())
        {
            await _userClient.DeleteAsync(userId, CancellationToken.None);
            await OnChangeSearchInputAsync();
        }
    }
}